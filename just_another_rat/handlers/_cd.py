# -*- coding: utf-8 -*-
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º."""

import os

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from loguru import logger


DESCRIPTION: str = \
    "*üìÑ –ö–æ–º–∞–Ω–¥–∞ /cd*:\n\n" \
    "–ú–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é.\n" \
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (`/cd`), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é."

router: Router = Router(name=__name__)


@router.message(
    Command(commands=["cd"])
)
async def command_cd(
    message: Message
) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ."""
    logger.debug("–û–±—Ä–∞–±–æ—Ç—á–∏–∫:\tcommand_cd")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

    if message.text == "/cd /?":
        await message.answer(text=DESCRIPTION)
        return None
    
    if message.text == "/cd":
        await message.answer(
            text="*üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:*\n\n"
                 "```–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è\n"
                 f"{os.getcwd()}"
                 "```"
        )
        return None

    try:
        os.chdir(message.text[3:].strip())
        await message.answer(
            text="*üìÅ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:*\n\n"
                 "```–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è\n"
                 f"{os.getcwd()}"
                 "```"
        )
    except Exception as e:
        await message.answer(
            text="*‚ùå –û—à–∏–±–∫–∞*\n\n"
                 "–í–µ—Ä–æ—è—Ç–Ω–æ —Ç–∞–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )
